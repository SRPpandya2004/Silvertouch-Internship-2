# -*- coding: utf-8 -*-
"""LSTM Model Tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yvudqd5pi8J5Uu-CJXIThpQAhRS_g9Xv
"""

import pandas as pd

df = pd.read_csv('/content/sample_data/milk_production.csv')
print(df.head())

import numpy as np

values = df['Production'].values

# Normalize data (important for LSTM)
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
values_scaled = scaler.fit_transform(values.reshape(-1,1))

# Function to create sequences and labels
def create_sequences(data, seq_length):
    X = []
    y = []
    for i in range(len(data) - seq_length):
        X.append(data[i:i+seq_length])
        y.append(data[i+seq_length])
    return np.array(X), np.array(y)

SEQ_LENGTH = 30
X, y = create_sequences(values_scaled, SEQ_LENGTH)

print(X.shape, y.shape)  # (samples, timesteps, features)

split = int(0.8 * len(X))
X_train, X_val = X[:split], X[split:]
y_train, y_val = y[:split], y[split:]

pip install tensorflow

import tensorflow as tf
from tensorflow.keras import layers, models

def build_model(units=200, dropout=0.8, learning_rate=0.1):
    model = models.Sequential()
    model.add(layers.LSTM(units, input_shape=(X_train.shape[1], X_train.shape[2])))
    model.add(layers.Dropout(dropout))
    model.add(layers.Dense(1))
    model.compile(
        loss='mse',
        optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),
        metrics=['mse', 'mae']
    )
    return model

model = build_model(units=128, dropout=0.2, learning_rate=0.01)

history = model.fit(
    X_train, y_train,
    epochs=160,
    batch_size=20,
    validation_data=(X_val, y_val),
    verbose=1
)

import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error

# Predict on validation data
y_pred = model.predict(X_val)

# Inverse transform to get original scale
y_val_orig = scaler.inverse_transform(y_val)
y_pred_orig = scaler.inverse_transform(y_pred)

# Calculate metrics
mse = mean_squared_error(y_val_orig, y_pred_orig)
rmse = np.sqrt(mse)
print(f"MSE: {mse:.4f}")
print(f"RMSE: {rmse:.4f}")

# Plot actual vs predicted
plt.figure(figsize=(10,6))
plt.plot(y_val_orig, label='Actual')
plt.plot(y_pred_orig, label='Predicted')
plt.title('Actual vs Predicted')
plt.legend()
plt.show()

# Plot training and validation loss
plt.figure(figsize=(10,6))
plt.plot(history.history['loss'], label='Train Loss (MSE)')
plt.plot(history.history['val_loss'], label='Validation Loss (MSE)')
plt.title('Training and Validation Loss')
plt.legend()
plt.show()

